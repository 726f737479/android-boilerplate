apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 1
        versionName "0.1.0"

        version = versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile support.appcompat
    compile support.recyclerview

    compile rx.java
    compile rx.android
    compile rx.androidProguard

    compile dagger.dagger
    provided dagger.annotations
    compile square.timber

    compile square.retrofit.core
    compile square.retrofit.rxjava

    androidTestCompile support.annotations
    androidTestCompile integrationTesting.runner
    androidTestCompile integrationTesting.support
    androidTestCompile integrationTesting.rules

    testCompile testing.junit
    testCompile testing.mockito
    testCompile testing.robolectric.core
}

ext {
    bintrayRepo = "android-boilerplate-core"
    bintrayName = "core"
    bintrayUserOrg = "brainbeanapps"


    publishedGroupId = 'com.brainbeanapps'
    libraryName = 'Android Boilerplate Core'
    artifact = 'core'

    libraryDescription = 'Core Android module as library that we use at Brainbean Apps as a reference for new Android projects.'

    siteUrl = 'https://github.com/brainbeanapps/android-boilerplate-core'
    gitUrl = 'https://github.com/brainbeanapps/android-boilerplate-core.git'

    developerId = 'brainbeanapps'
    developerName = 'Brainbean Apps'
    developerEmail = 'support@brainbeanapps.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

group = publishedGroupId

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            pom.project {
                name libraryName
                description libraryDescription
                url siteUrl
                version version

                packaging 'aar'
                groupId publishedGroupId
                artifactId artifact

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                scm {
                    connection gitUrl
                    url siteUrl

                }

                developers {
                    developer {
                        name developerId
                    }
                }
            }
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']

    pkg {
        repo = bintrayRepo
        name = bintrayName
        userOrg = bintrayUserOrg

        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true

        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}


